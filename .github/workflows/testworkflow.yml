name: Terraform deploy

on:
    push:
        branches:
          #- main
           - dev
jobs:
 terraform:
    name: Deploy VM using SIG
    runs-on: [self-hosted]
    defaults:
        run:
            shell: bash
            working-directory: '${{github.workspace}}/terraform' 
        
    env:
      #ROOT_PATH : '${{github.workspace}}\terraform-poc'
      TF_LOG: INFO
    permissions:
      id-token: write
      contents: read
    # needs: packer
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: 'Run Az commands'
        run: |
         az account show

      - name: Terraform Init 
        # working-directory: ${{env.ROOT_PATH}}
        env:
          STORAGE_ACCOUNT: "tfstatewells"
          CONTAINER_NAME: "ansible"
          RESOURCE_GROUP: "Test_VM"
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          #ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET_ID}}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          
        run: terraform init -input=false -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME"  
        
        

        #Run Terraform Plan

      - name: Terraform plan
        
        working-directory: '${{github.workspace}}/terraform-poc' 
        run: 
         terraform plan -no-color
        env:
          STORAGE_ACCOUNT: ${{ secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}
          CONTAINER_NAME: ${{ secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}
          RESOURCE_GROUP: ${{ secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        
  
       # Run Terraform apply
      - name: Terraform Apply
        
        working-directory: '${{github.workspace}}/terraform-poc'
        run: 
         terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      
      # Give execute permission to create_inventory.sh
      - name: Make create_inventory.sh executable
        run: chmod +x ./create_inventory.sh
        
      - name: Generate Ansible Inventory
        run: ./create_inventory.sh
        working-directory: '${{github.workspace}}/terraform-poc'
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
          
      - name: Set up Ansible
        run: sudo apt-get install -y ansible

      # - name: Install Ansible.
      #   run: |
      #       sudo apt update
      #       sudo apt install -y ansible jq  

  
      - name: Run Ansible Playbook
        working-directory: '${{github.workspace}}/ansible'
        run: |
          ansible-playbook -i inventory.ini setup_vm.yml
          ansible-playbook -i inventory.ini service.yml

    